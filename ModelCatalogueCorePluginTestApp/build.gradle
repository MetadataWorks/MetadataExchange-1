

task cleanIdeaFiles(type: Delete) {
    delete '**/.idea'
    delete '**/*.iml'
}

task cleanData(type: Delete) {
    Properties properties = new Properties()
    properties.load(file('application.properties').newInputStream())
    delete "${System.getProperty('java.io.tmpdir')}/ModelCatalogueCorePluginTestApp/${properties['app.version']}"
}


task cleanGrailsFolders(type: Delete) {
    Properties properties = new Properties()
    properties.load(file('application.properties').newInputStream())
    delete 'target'
    delete 'target-eclipse'
    delete '**/*.gen.fixture.js'
    delete '**/*.gen.fixture.coffee'
    delete "${System.getProperty('user.home')}/.grails/${properties['app.grails.version']}/ModelCatalogueCorePluginTestApp"
}

task cleanGrails(type: Exec, dependsOn: cleanGrailsFolders) {
    commandLine grailsw, 'clean-all', '--stacktrace', '--non-interactive'

}

task refreshGrailsDependencies(type: Exec) {
    commandLine grailsw, 'refresh-dependencies', '--stacktrace', '--non-interactive'
    mustRunAfter cleanGrails
}

task cleanAll(type: Delete, dependsOn: [cleanData, cleanGrails, refreshGrailsDependencies]) {
    delete '../build'
}

task runDev(type: Exec, dependsOn: bowerInstall) {
    description = "Run MX in development environment"

    assertJava8()
    environment 'GRAILS_OPTS', "-Xmx1G -Xms512m -XX:MaxPermSize=512m -server"

    def cmds = [grailsw]

    if (project.hasProperty('mc.blank')) {
        environment 'MC_BLANK_DEV', "true"
    }

    if (project.hasProperty('mc.war')) {
        cmds << 'run-war'
    } else {
        cmds << 'run-app'
    }

    if (project.hasProperty('mc.debug')) {
        cmds << '--debug-fork'
    }

    cmds << '--non-interactive'
    cmds << '--stacktrace'

    commandLine cmds
    mustRunAfter 'stop'
}

task runGrailsTests(type: Exec, dependsOn: [bowerInstall, startContainers, initTestDatabaseInMySQLContainer]) {
    description = "Run all Grails MX tests. Can pass args to Grails test-app, e.g.: -PtestArgs='unit:spock PostController'"

    assertJava8()
    environment 'GRAILS_OPTS', "-Xmx2G -Xms1G -XX:MaxPermSize=1G -server"
    environment 'DOCKERIZED_TESTS', "true"
    environment 'FILE_OPENER_SKIP', "true"
    environment 'MC_INDEX_PREFIX', "test_${System.currentTimeMillis()}"
    environment 'MC_DOCKER_HOST', host


    def cmds = [grailsw, 'test-app', '-war', '--non-interactive', '--stacktrace', '-integration', '-unit']
    if (project.hasProperty('testArgs')) { // get arguments for grails test-app
        cmds.addAll(testArgs.split(' '))
    }
    commandLine cmds

    inputs.files files('grails-app')
    inputs.files files('src')
    inputs.files files('web-app')
    // we are not doing functional tests until they work robustly and independently of each other.
    //inputs.files files('test/functional')
    inputs.files files('test/integration')
    inputs.files files('test/unit')

    outputs.files file('target/test-reports/')
}



task collectTestReports(type: Copy) {
    description = "Collects reports from Grails tests"
    from('target') {
        include 'geb-reports/**'
        include 'test-reports/**'
        include 'test-reports-js/**'
        include 'assets/modelcatalogue/modelcatalogue-*.*'
    }
    into "${System.getProperty('user.home')}/reports/"
}



stop.finalizedBy stopContainers


task war(type: Exec, dependsOn: bowerInstall) {
    description = "Build production war of MX application"
    commandLine grailsw, 'war', '--non-interactive', '--stacktrace'
}


task copyWar(type: Copy) {
    from 'target', {
        include '*.war'
        rename '.*\\.war', 'mc.war'
    }
    into '../build'
}

task restartDev(dependsOn: [stop, runDev]) {

}

war.finalizedBy copyWar



